/* This is a program with a smorgishborg of random functions that are used to check 
  the validity of the parser being used. It's behaviour is well-defined but entirely arbitrary
  and meant to show off the grammar given in the C- specification without throwing any errors 
  
  This has been reused from C1, with some additional scoping behaviour added for demonstration */

bool isEven(int num);
int factorial(int num);
void printResult(int num, bool isEven);

bool x;

bool isEven(int num) {
  x = num == 3; /* x from global scope should be valid here */
  /* This assumes non floating-point division */
  return (num / 2) * 2 == num;
}

/* Calculates the factorial of a number using recursion */
int factorial(int num) {
  if (num <= 1) {
    return 1;
  }
  return num * factorial(num - 1);
}

/* Prints the result, but adds 1 to the number if it's odd to make it even */
void printResult(int num, bool isEven) {
  if (isEven) {
    output(num);
    return;
  } else {
    output(num + 1);
    return;
  }
}

void main(void) {
  int x;  /* redefine x as an int */
  int arr[5];
  x = 10;
  arr[0] = factorial(x);

  /* test a generic scope, redefine x a second time (bool -> int -> bool) */
  {
    bool x;
    x = false && arr[4];
  }
  
  /* Does separate logic if the first element of the accessed array is greater than 100 */
  if (arr[0] > 100) 
    printResult(arr[0], isEven(arr[0]));
  else
    printResult(x, isEven(x));
  
  while (x > 0) {
    int y;
    y = x - 1;
    x = y;
  }
  
  return;
}
