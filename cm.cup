/*
  Created by: Fei Song
  File Name: tiny.cup
*/
/* ----------------------------------- ^^^^^ Do we get rid of this?????? --------------------- */
  
/* ----------------------Preliminary Declarations Section--------------------*/
  
import absyn.*;
  
/* Parser code to change the way the parser reports errors (include
  line and column number of the error). */
parser code {:
  public void report_reason(String message) {
    StringBuffer m = new StringBuffer("Reason");
    m.append(": " + message + "\n");
    System.err.println(m);
  }

  public void manual_report_error(int line, int col, String token, String value) {
    StringBuffer m = new StringBuffer("Error");
    m.append(" in line "+(line+1));  
    m.append(", column "+(col+1));
    if (token != null) {
      m.append(" ("+token);
      m.append((value != null ? ":" + value : "") + ")");
    }
    m.append(": Syntax error");
    System.err.println(m);


  }

   /* Change the method report_error so it will display the line and
     column of where the error occurred in the input as well as the
     reason for the error which is passed into the method in the
     String 'message'. */
   public void report_error(String message, Object info) {    
      /* Create a StringBuffer called 'm' with the string 'Error' in it. */
      StringBuffer m = new StringBuffer("Error");
  
      /* Check if the information passed to the method is the same
        type as the type java_cup.runtime.Symbol. */
      if (info instanceof java_cup.runtime.Symbol) {
        /* Declare a java_cup.runtime.Symbol object 's' with the
          information in the object info that is being typecasted
          as a java_cup.runtime.Symbol object. */
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
  
        /* Check if the line number in the input is greater or
          equal to zero. */
        if (s.left >= 0) {           
           /* Add to the end of the StringBuffer error message
             the line number of the error in the input. */
           m.append(" in line "+(s.left+1));  
           /* Check if the column number in the input is greater
             or equal to zero. */
           if (s.right >= 0)              
              /* Add to the end of the StringBuffer error message
                the column number of the error in the input. */
              m.append(", column "+(s.right+1));
        }
        
        m.append(" ("+sym.terminalNames[s.sym]);
        m.append((s.value != null ? ":" + s.value : "") + ")");
      }
  
      /* Add to the end of the StringBuffer error message created in
        this method the message that was passed into this method. */
      m.append(": "+message);
  
      /* Print the contents of the StringBuffer 'm', which contains
        an error message, out on a line. */
      System.err.println(m);
   }
  
   /* Change the method report_fatal_error so when it reports a fatal
     error it will display the line and column number of where the
     fatal error occurred in the input as well as the reason for the
     fatal error which is passed into the method in the object
     'message' and then exit.*/
   public void report_fatal_error(String message, Object info) {
      report_error(message, info);
      System.exit(1);
   }

:};
  
  
/* ------------Declaration of Terminals and Non Terminals Section----------- */
  
terminal VOID, INTEGER, BOOL;
terminal WHILE, RETURN, IF, ELSE, SEMI, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
terminal PLUS, MINUS, TIMES, OVER, LTEQUAL, LT, GTEQUAL, GT, EQUAL, NOTEQUAL, NOT, OR, AND, ASSIGN, UMINUS;

terminal String ID, NUM, TRUTH;

terminal ERROR;

non terminal DecList program, declaration_list;
non terminal Dec declaration, fun_declaration, fun_prototype;
non terminal Exp compound_stmt, statement, expression_stmt, selection_stmt, iteration_stmt, return_stmt, expression;
non terminal Exp factor, call;
non terminal ExpList statement_list, args, arg_list;
non terminal NameTy type_specifier;
non terminal VarDecList params, param_list, local_declarations;
non terminal VarDec param, var_declaration;
non terminal VarExp var;

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc LT, GT, EQUAL, LTEQUAL, GTEQUAL, NOTEQUAL;
precedence left PLUS, MINUS;
precedence left TIMES, OVER; 
precedence right UMINUS; 

/* ----------------------------Grammar Section-------------------- */
  
start with program;

program ::= declaration_list:e
  {: RESULT = e; :};


declaration_list ::= declaration_list:d1 declaration:d2
    {:
      if (d2 != null) {
        DecList d = d1;
        while (d.tail != null)
          d = d.tail;
        d.tail = new DecList(d2, null);
      }
      RESULT = d1;
    :} 
  | declaration:d
    {:
      RESULT = new DecList(d, null);
    :}
  | error:e declaration:d
    {:
      parser.report_reason("Invalid declaration"); 
      RESULT = new DecList(d, null);
    :}  
  | declaration_list:d error 
    {:
      parser.report_reason("Invalid declaration"); 
      RESULT = d;
    :}  
  ;


declaration ::= var_declaration:v
    {:
      RESULT = v;
    :}
  | fun_declaration:f 
    {:
      RESULT = f;
    :}
  | fun_prototype:f
    {:
      RESULT = f;
    :};


var_declaration ::= type_specifier:t ID:i SEMI
    {:
      RESULT = new SimpleDec(tleft, tright, t, i);
    :} 
  | type_specifier:t ID:i LSQUARE NUM:n RSQUARE SEMI
    {:
      RESULT = new ArrayDec(tleft, tright, t, i, Integer.parseInt(n));
    :}
  | type_specifier:t ID:i error 
    {:
      // manual_report_error(ileft, iright, "ID", i);
      report_reason("Variable declaration needs to end with a semicolon");
      RESULT = new SimpleDec(tleft, tright, t, i);
    :}
  ;


type_specifier ::= BOOL:b 
    {:
      RESULT = new NameTy(bleft, bright, NameTy.BOOL);
    :}
  | INTEGER:i 
    {:
      RESULT = new NameTy(ileft, iright, NameTy.INT);
    :}
  | VOID:v
    {:
      RESULT = new NameTy(vleft, vright, NameTy.VOID);
    :}
  | error:i 
    {:
      // parser.manual_report_error(ileft, iright, "INVALID_TYPE", i);
      parser.report_reason("Invalid type specifier");
      RESULT = new NameTy(ileft, iright, NameTy.INT);
    :}
    ;


fun_declaration ::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:s
    {:
      RESULT = new FunctionDec(tleft, tright, t, i, p, s);
    :}
  | type_specifier:t ID:i LPAREN error RPAREN compound_stmt:s
      {:
      parser.report_reason("Invalid function parameters");
      RESULT = new FunctionDec(tleft, tright, t, i, null, s);;
    :}
  | type_specifier:t ID:i LPAREN RPAREN compound_stmt:s
      {:
      parser.manual_report_error(ileft, iright, "ID", i);
      parser.report_reason("Empty parameter list invalid (should be void?)");
      RESULT = new FunctionDec(tleft, tright, t, i, null, s);;
    :}
  ;


// TODO: nilexpr
fun_prototype ::= type_specifier:t ID:i LPAREN params:p RPAREN SEMI
    {:
      RESULT = new FunctionDec(tleft, tright, t, i, p, new NilExp(tleft, tright));
    :}
  | type_specifier:t ID:i LPAREN RPAREN SEMI
    {:
      // TODO: other error print info
      parser.manual_report_error(ileft, iright, "ID", i);
      parser.report_reason("Empty parameter list invalid (should be void?)");
      RESULT = new FunctionDec(tleft, tright, t, i, null, new NilExp(tleft, tright));
    :}
  | type_specifier:t ID:i LPAREN params:p RPAREN 
    {:
      // TODO: other error print info
      parser.manual_report_error(ileft, iright, "ID", i);
      parser.report_reason("Function prototypes need to end with a semicolon");
      RESULT = new FunctionDec(tleft, tright, t, i, p, new NilExp(tleft, tright));
    :}
  | type_specifier:t ID:i LPAREN error RPAREN SEMI
    {:
      parser.report_reason("Invalid function parameters");
      RESULT = new FunctionDec(tleft, tright, t, i, null, new NilExp(tleft, tright));
    :}
  ;

params ::= param_list:p
    {:
      RESULT = p;
    :}
  | VOID:v
    {:
      RESULT = null;
    :};



param_list ::= param_list:p1 COMMA param:p2 
    {:
      if (p2 != null) {
        VarDecList p = p1;
        while (p.tail != null)
          p = p.tail;
        p.tail = new VarDecList(p2, null);
        RESULT = p1;
      }
      RESULT = p1;

    :}
  | param:p
    {:
      RESULT = new VarDecList(p, null);
    :}
  | param_list:p1 COMMA error 
    {:
      parser.report_reason("Invalid parameter declaration");
      RESULT = p1;
    :}
  | error COMMA param:p2 
    {:
      parser.report_reason("Invalid parameter declaration");
      RESULT = new VarDecList(p2, null);
    :}
  | param_list:p1 param:p2 
    {:
      // TODO: print line number and other error info
      parser.manual_report_error(p1left, p1right, null, null);
      parser.report_reason("Missing comma in parameter declarations");
      if (p2 != null) {
        VarDecList p = p1;
        while (p.tail != null)
          p = p.tail;
        p.tail = new VarDecList(p2, null);
      }
      RESULT = p1;
    :}
  ;


param ::= type_specifier:t ID:i 
    {:
      RESULT = new SimpleDec(tleft, tright, t, i);
    :}
  | type_specifier:t ID:i LSQUARE RSQUARE
    {:
      RESULT = new ArrayDec(tleft, tright, t, i, 0);
    :};


compound_stmt ::= LCURLY local_declarations:l statement_list:s RCURLY
    {:
      RESULT = new CompoundExp(lleft, lright, l, s);
    :};


local_declarations ::= local_declarations:p1 var_declaration:p2 
    {:
      VarDecList p = p1;
      if (p == null) {
        RESULT = new VarDecList(p2, null);
      } else {
        while (p.tail != null)
          p = p.tail;
        p.tail = new VarDecList(p2, null);
        RESULT = p1;
      }
    :}
  | local_declarations:p error 
    {:
      parser.report_reason("Local declaration invalid");
      RESULT = p;
    :}
  | /* e-production */;


statement_list ::= statement_list:e1 statement:e2 
    {:
      ExpList e = e1;
      if (e == null) {
        RESULT = new ExpList(e2, null);
      } else {
        while (e.tail != null)
          e = e.tail;
        e.tail = new ExpList(e2, null);
        RESULT = e1;
      }
    :}
  | statement_list:e error 
    {:
      parser.report_reason("Invalid statement");
      RESULT = e;
    :}
  | /* e-production */;


statement ::= expression_stmt:e
    {:
      RESULT = e;
    :}
  | compound_stmt:c
    {:
      RESULT = c;
    :}
  | selection_stmt:s 
    {:
      RESULT = s;
    :}
  | iteration_stmt:i
    {:
      RESULT = i;
    :}
  | return_stmt:r
    {:
      RESULT = r;
    :};


// TODO: nilexpr
expression_stmt ::= expression:e SEMI 
    {:
      RESULT = e;
    :}
  | SEMI:s
    {:
      // This is likely wrong?
      RESULT = new NilExp(sleft, sright);
    :};


// TODO: nilexpr
selection_stmt ::= IF:i LPAREN expression:e RPAREN statement:s 
    {:
      RESULT = new IfExp(ileft, iright, e, s, new NilExp(ileft, iright));
    :}
  | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
    {:
      RESULT = new IfExp(ileft, iright, e, s1, s2);
    :}
  | IF:i LPAREN error:e RPAREN
    {:
      parser.report_reason("Invalid if statement expression -- ignoring if statement");
      RESULT = new IfExp(ileft, iright, new BoolExp(eleft, eright, false), new NilExp(ileft, iright), new NilExp(ileft, iright));
    :}    
  | IF:i LPAREN:l expression:e
    {:
      parser.manual_report_error(lleft, lright, "LPAREN", null);
      parser.report_reason("Unmatched ( in if statement -- ignoring if statement");
      RESULT = new IfExp(ileft, iright, e, new NilExp(ileft, iright), new NilExp(ileft, iright));
    :}    
  ;


iteration_stmt ::= WHILE:w LPAREN expression:e RPAREN statement:s
    {:
      RESULT = new WhileExp(wleft, wright, e, s);
    :}
  | WHILE:w LPAREN error:e RPAREN
    {:
      parser.report_reason("Invalid while statement expression -- ignoring while statement");
      RESULT = new WhileExp(wleft, wright, new BoolExp(eleft, eright, false), new NilExp(wleft, wright));
    :}    
  | WHILE:w LPAREN:l expression:e
    {:
      parser.manual_report_error(lleft, lright, "LPAREN", null);
      parser.report_reason("Unmatched ( in while statement -- ignoring while statement");
      RESULT = new WhileExp(wleft, wright, e, new NilExp(wleft, wright));
    :}   
    
    ;


// TODO: nilexpr
return_stmt ::= RETURN:r expression:e SEMI 
    {:
      RESULT = new ReturnExp(rleft, rright, e);
    :}
  | RETURN:r SEMI
    {:
      RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright));
    :};


var ::= ID:i
    {:
      RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i));
    :} 
  | ID:i LSQUARE expression:e RSQUARE
    {:
      RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e));
    :};


expression ::= var:v ASSIGN expression:e 
    {:
      RESULT = new AssignExp(vleft, vright, v, e);
    :}
  | expression:o OR expression:a 
    {:
      RESULT = new OpExp(oleft, oright, o, OpExp.OR, a);
    :}
  | expression:a AND expression:u 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.AND, u);
    :}
  | NOT:n expression:u
    {:
      RESULT = new OpExp(nleft, nright, new NilExp(nleft, nright), OpExp.NOT, u);
    :} 
  | expression:a LTEQUAL expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.LE, e);
    :}
  | expression:a LT expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.LT, e);
    :}
  | expression:a GT expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.GT, e);
    :}
  | expression:a GTEQUAL expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.GE, e);
    :}
  | expression:a EQUAL expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.EQ, e);
    :}
  | expression:a NOTEQUAL expression:e 
    {:
      RESULT = new OpExp(aleft, aright, a, OpExp.NE, e);
    :}
  | expression:e PLUS expression:t 
    {:
      RESULT = new OpExp(eleft, eright, e, OpExp.PLUS, t);
    :}
  | expression:e MINUS expression:t 
    {:
      RESULT = new OpExp(eleft, eright, e, OpExp.MINUS, t);
    :}
  | expression:t TIMES expression:s 
    {:
      RESULT = new OpExp(tleft, tright, t, OpExp.MUL, s);
    :}
  | expression:t OVER expression:s 
    {:
      RESULT = new OpExp(tleft, tright, t, OpExp.DIV, s);
    :}
  | MINUS:m expression:s
    {:
      RESULT = new OpExp(mleft, mright, new NilExp(mleft, mright), OpExp.UMINUS, s);
    :} 
    %prec UMINUS
  | factor:f
    {:
      RESULT = f;
    :};


factor ::= LPAREN:l expression:e RPAREN
    {:
      RESULT = e;
    :} 
  | LPAREN:l error RPAREN
    {:
      parser.report_reason("Invalid factor");
      RESULT = new NilExp(lleft, lright);
    :}
  | LPAREN:l expression:e
    {:
      //TODO: proper output
      parser.manual_report_error(lleft, lright, "LPAREN", null);
      parser.report_reason("Unmatched ( in expression");
      RESULT = new NilExp(lleft, lright);
    :}
  | var:v
    {:
      RESULT = v;
    :} 
  | call:c
    {:
      RESULT = c;
    :} 
  | NUM:n
    {:
      RESULT = new IntExp(nleft, nright, Integer.parseInt(n));
    :}
  | TRUTH:t
    {:
      RESULT = new BoolExp(tleft, tright, Boolean.parseBoolean(t));
    :};


call ::= ID:i LPAREN args:a RPAREN
    {:
      RESULT = new CallExp(ileft, iright, i, a);
    :}
  | ID:i LPAREN:l args:a
    {:
      parser.manual_report_error(lleft, lright, "LPAREN", null);
      parser.report_reason("Unmatched ( in call statement"); 
      RESULT = new CallExp(ileft, iright, i, null);
    :}
  ;

args ::= arg_list:a
    {:
      RESULT = a;
    :} 
  | /* e-production */;


arg_list ::= arg_list:a COMMA expression:e1
    {:
      ExpList e = a;
      while (e.tail != null)
        e = e.tail;
      e.tail = new ExpList(e1, null);
      RESULT = a;
    :} 
  | expression:e
    {:
      RESULT = new ExpList(e, null);
    :}
  | arg_list:a COMMA error
    {:
      parser.report_reason("Invalid argument");
      RESULT = a;
    :}
  | error COMMA expression:e
    {:
      parser.report_reason("Invalid argument");
      RESULT = new ExpList(e, null);
    :}
  ;

